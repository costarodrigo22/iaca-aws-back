org: studyaws
service: chaparral

build:
  esbuild:
    minify: true
    bundle: true
    sourcemap: false
    exclude:
      - "@aws-sdk/*"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  architecture: arm64
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
          Resource: !GetAtt ChaparralUserPool.Arn
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: !GetAtt AccountsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: !GetAtt AccountsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: !GetAtt AccountsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
          Resource: !GetAtt AccountsTable.Arn
        - Effect: Allow
          Action:
            - geo:SearchPlaceIndexForText
            - geo:CalculateRoute
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::chaparral-avatar-bucket
            - arn:aws:s3:::chaparral-avatar-bucket/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            Fn::GetAtt:
              - OrderQueue
              - Arn
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: "*"
  deploymentMethod: direct
  environment:
    COGNITO_CLIENT_ID: !Ref ChaparralUserPoolClient
    COGNITO_POOL_ID: !Ref ChaparralUserPool
    AVATAR_BUCKET: !Ref AvatarBucket
    CLOUDFRONT_URL: ${env:CLOUDFRONT_URL}
    CLOUDFRONT_DISTRIBUTION_ID: ${env:CLOUDFRONT_DISTRIBUTION_ID}
    QUEUE_URL: ${env:QUEUE_URL}
  httpApi:
    cors:
      allowOrigins:
        - "*"
    authorizers:
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt ChaparralUserPool.ProviderURL
        audience:
          - !Ref ChaparralUserPoolClient

resources:
  Resources:
    ChaparralUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ChaparralUserPool
        MfaConfiguration: OFF
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        UsernameAttributes:
          - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 10
        Schema:
          - Name: given_name
            Mutable: true
            Required: true
            AttributeDataType: String
          - Name: phone_number
            Mutable: true
            Required: true
            AttributeDataType: String
          - Name: email
            Mutable: true
            Required: true
            AttributeDataType: String
    ChaparralUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ChaparralUserPoolClient
        UserPoolId: !Ref ChaparralUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        TokenValidityUnits:
          AccessToken: hours
          RefreshToken: hours
        AccessTokenValidity: 24
        RefreshTokenValidity: 1440 #60 days
    AccountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AccountsTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    PlaceIndex:
      Type: AWS::Location::PlaceIndex
      Properties:
        DataSource: Here
        IndexName: ChaparralPlaceIndex
    RouteCalculator:
      Type: AWS::Location::RouteCalculator
      Properties:
        CalculatorName: ChaparralRouteCalculator
        DataSource: Here
    AvatarBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: chaparral-avatar-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - DELETE
                - POST
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Status: Enabled
              ExpirationInDays: 365
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue
        VisibilityTimeout: 30 #tempo em segundos que o consumer tem para resolver a mensagem e deleta-la
        DelaySeconds: 0 #tempo que a mensagem fica visivel para os consumers
        MessageRetentionPeriod: 86400 #tempo que a mensagem fica na fila caso nenhum consumer pege-a
        MaximumMessageSize: 262144 # tamanho da mensagem (256kb)
        ReceiveMessageWaitTimeSeconds: 20 #tempo que o SQS demora para entregar a mensagem para o consumer (evita buscas constantes)
        SqsManagedSseEnabled: true # Configuração de criptografia SSE-SQS
functions:
  signUp:
    handler: src/functions/auth/signUp.handler
    events:
      - httpApi:
          path: /auth/sign-up
          method: POST
  accountConfirmation:
    handler: src/functions/auth/accountConfirmation.handler
    events:
      - httpApi:
          method: POST
          path: /auth/account-confirmation
  signIn:
    handler: src/functions/auth/signIn.handler
    events:
      - httpApi:
          method: POST
          path: /auth/sign-in
  refreshToken:
    handler: src/functions/auth/refreshToken.handler
    events:
      - httpApi:
          method: POST
          path: /auth/refresh-token
  forgotPassword:
    handler: src/functions/auth/forgotPassword.handler
    events:
      - httpApi:
          method: POST
          path: /auth/forgot-password
  resetPassword:
    handler: src/functions/auth/resetPassword.handler
    events:
      - httpApi:
          method: POST
          path: /auth/reset-password
  profile:
    handler: src/functions/user/profile.handler
    events:
      - httpApi:
          method: GET
          path: /user/profile
          authorizer:
            name: CognitoAuthorizer
  updateProfile:
    handler: src/functions/user/updateProfile.handler
    events:
      - httpApi:
          method: POST
          path: /user/update/profile
          authorizer:
            name: CognitoAuthorizer
  resendVerifyCode:
    handler: src/functions/user/resendVerifyCode.handler
    events:
      - httpApi:
          method: POST
          path: /user/profile/resend-code
  addItemToCart:
    handler: src/functions/user/addItemToCart.handler
    events:
      - httpApi:
          method: POST
          path: /user/cart
          authorizer:
            name: CognitoAuthorizer
  updateQuantityProductToCart:
    handler: src/functions/user/updateQuantityProductToCart.handler
    events:
      - httpApi:
          method: PUT
          path: /user/cart
          authorizer:
            name: CognitoAuthorizer
  getCartItems:
    handler: src/functions/user/getCartItems.handler
    events:
      - httpApi:
          method: GET
          path: /user/cart
          authorizer:
            name: CognitoAuthorizer
  deleteCartItem:
    handler: src/functions/user/deleteCartItem.handler
    events:
      - httpApi:
          method: GET
          path: /user/cart/{productCode}
          authorizer:
            name: CognitoAuthorizer
  clearCart:
    handler: src/functions/user/cart/clearCart.handler
    events:
      - httpApi:
          method: DELETE
          path: /user/cart/clearCart
          authorizer:
            name: CognitoAuthorizer
  addAddress:
    handler: src/functions/user/address/addAddress.handler
    events:
      - httpApi:
          method: POST
          path: /user/address
          authorizer:
            name: CognitoAuthorizer
  getAddress:
    handler: src/functions/user/address/getAddress.handler
    events:
      - httpApi:
          method: GET
          path: /user/address
          authorizer:
            name: CognitoAuthorizer
  deleteAddress:
    handler: src/functions/user/address/deleteAddress.handler
    events:
      - httpApi:
          method: DELETE
          path: /user/address/{addressId}
          authorizer:
            name: CognitoAuthorizer
  updateAddress:
    handler: src/functions/user/address/updateAddress.handler
    events:
      - httpApi:
          method: PUT
          path: /user/address
          authorizer:
            name: CognitoAuthorizer
  selecteAddress:
    handler: src/functions/user/address/selecteAddress.handler
    events:
      - httpApi:
          method: POST
          path: /user/address/select
          authorizer:
            name: CognitoAuthorizer
  deselectAllAddresses:
    handler: src/functions/user/address/deselectAllAddresses.handler
    events:
      - httpApi:
          method: GET
          path: /user/address/deselectAllAddresses
          authorizer:
            name: CognitoAuthorizer
  getSelectedAddress:
    handler: src/functions/user/address/getSelectedAddress.handler
    events:
      - httpApi:
          method: GET
          path: /user/address/select
          authorizer:
            name: CognitoAuthorizer
  deselectAllDefault:
    handler: src/functions/user/address/deselectAllDefault.handler
    events:
      - httpApi:
          method: GET
          path: /user/address/deselectAllDefault
          authorizer:
            name: CognitoAuthorizer
  selecteAddressDefault:
    handler: src/functions/user/address/selecteAddressDefault.handler
    events:
      - httpApi:
          method: POST
          path: /user/address/selecteAddressDefault
          authorizer:
            name: CognitoAuthorizer
  createOrder:
    handler: src/functions/user/orders/createOrder.handler
    events:
      - httpApi:
          method: POST
          path: /user/order
          authorizer:
            name: CognitoAuthorizer
  getOrders:
    handler: src/functions/user/orders/getOrders.handler
    events:
      - httpApi:
          method: GET
          path: /user/order
          authorizer:
            name: CognitoAuthorizer
  getOrderById:
    handler: src/functions/user/orders/getOrderById.handler
    events:
      - httpApi:
          method: GET
          path: /user/order/{orderId}
          authorizer:
            name: CognitoAuthorizer
  calculateRoute:
    handler: src/functions/user/route/calculateRoute.handler
    events:
      - httpApi:
          method: POST
          path: /user/route
          authorizer:
            name: CognitoAuthorizer
  generatePresignedUrlAvatar:
    handler: src/functions/user/profile/generatePresignedUrlAvatar.handler
    events:
      - httpApi:
          method: POST
          path: /user/avatar/presigned-url
          authorizer:
            name: CognitoAuthorizer
  generatePresignedUrlGetAvatar:
    handler: src/functions/user/profile/generatePresignedUrlGetAvatar.handler
    events:
      - httpApi:
          method: GET
          path: /user/avatar/presigned-url
          authorizer:
            name: CognitoAuthorizer
  deleteItemBucket:
    handler: src/functions/user/profile/deleteItemBucket.handler
    events:
      - httpApi:
          method: DELETE
          path: /user/avatar/deleteItemBucket
          authorizer:
            name: CognitoAuthorizer
  webHookOmiePayment:
    handler: src/functions/omie/webHookOmiePayment.handler
    events:
      - httpApi:
          method: POST
          path: /omie/payments/callback/{orderId}/{userId}/{email}/{userName}/{codeOrder}
  sendMail:
    handler: src/functions/mail/sendMail.handler
    events:
      - httpApi:
          method: POST
          path: /send
  updateAvatarTrigger:
    handler: src/functions/user/profile/updateAvatarTrigger.handler
    events:
      - s3:
          bucket: !Ref AvatarBucket
          event: s3:ObjectCreated:Put
          existing: true
  cognitoCustomMessage:
    handler: src/functions/user/profile/cognitoCustomMessage.handler
    events:
      - cognitoUserPool:
          pool: ChaparralUserPool
          trigger: CustomMessage
          existing: true
          forceDeploy: true
  consumerQueuePayment:
    handler: src/functions/omie/consumerQueuePayment.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - OrderQueue
              - Arn
          batchSize: 10
          maximumBatchingWindow: 5
